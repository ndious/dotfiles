set nocompatible            " disable compatibility to old-time vi
set showmatch               " show matching 
set ignorecase              " case insensitive 
set mouse=v                 " middle-click paste with 
set hlsearch                " highlight search 
set incsearch               " incremental search
set tabstop=4               " number of columns occupied by a tab 
set softtabstop=4           " see multiple spaces as tabstops so &lt;BS&gt; does the right thing
set expandtab               " converts tabs to white space
set shiftwidth=4            " width for autoindents
set autoindent              " indent a new line the same amount as the line just typed
set number                  " add line numbers
set relativenumber
set rnu
set wildmode=longest,list   " get bash-like tab completions
" set cc=80                  " set an 80 column border for good coding style
filetype plugin indent on   "allow auto-indenting depending on file type
syntax on                   " syntax highlighting
set mouse=a                 " enable mouse click
set clipboard=unnamedplus   " using system clipboard
filetype plugin on
set cursorline              " highlight current cursorline
set ttyfast                 " Speed up scrolling in Vim
set spell                 " enable spell check (may need to download language package)
set noswapfile            " disable creating swap file

call plug#begin()
Plug 'gruvbox-community/gruvbox'
Plug 'sonph/onehalf', { 'rtp': 'vim' }
Plug 'mxw/vim-jsx'
Plug 'elzr/vim-json'
Plug 'prettier/vim-prettier'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'

Plug 'ThePrimeagen/harpoon'
Plug 'ahmedkhalf/project.nvim'
Plug 'editorconfig/editorconfig-vim'
Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'make' }

Plug 'neovim/nvim-lspconfig'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/nvim-cmp'
Plug 'tzachar/cmp-tabnine', { 'do': './install.sh' }
Plug 'onsails/lspkind-nvim'
Plug 'nvim-lua/lsp_extensions.nvim'
Plug 'hrsh7th/vim-vsnip'
Plug 'hrsh7th/vim-vsnip-integ'

Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'NTBBloodbath/rest.nvim'
call plug#end()

" colorscheme gruvbox
colorscheme onehalfdark

" Mapping
let mapleader = ','

" Find files using Telescope command-line sugar.
nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>

" Using Lua functions
nnoremap <leader>ff <cmd>lua require('telescope.builtin').find_files()<cr>
nnoremap <leader>fg <cmd>lua require('telescope.builtin').live_grep()<cr>
nnoremap <leader>fb <cmd>lua require('telescope.builtin').buffers()<cr>
nnoremap <leader>fh <cmd>lua require('telescope.builtin').help_tags()<cr>

" Harpoon configuration
nnoremap <silent><leader>a :lua require('harpoon.mark').add_file()<cr>
nnoremap <silent><C-e> :lua require('harpoon.ui').toggle_quick_menu()<cr>
nnoremap <leader>1 :lua require('harpoon.ui').nav_file(1)<cr>
nnoremap <leader>2 :lua require('harpoon.ui').nav_file(2)<cr>
nnoremap <leader>3 :lua require('harpoon.ui').nav_file(3)<cr>
nnoremap <leader>4 :lua require('harpoon.ui').nav_file(4)<cr>
nnoremap <leader>5 :lua require('harpoon.ui').nav_file(5)<cr>

" Rest key binding
nmap <leader>rr <Plug>RestNvim
nmap <leader>rp <Plug>RestNvim
nmap <leader>rn <Plug>RestNvim

" GoTo code navigation.
" nmap <silent> gd <Plug>(coc-definition)
" nmap <silent> gy <Plug>(coc-type-definition)
" nmap <silent> gi <Plug>(coc-implementation)
" nmap <silent> gr <Plug>(coc-references)

" Tab and Shift Tab to navigate into the autocompletion
" inoremap <expr> <Tab> pumvisible() ? '<C-n>' : '\<Tab>'
" inoremap <expr> <S-Tab> pumvisible() ? '<C-p>' : '\<S-Tab>'

" LUA tricks
lua << EOF
function CreateNoremapGlobal(type, opts)
	return function(lhs, rhs)
		vim.api.nvim_set_keymap(type, lhs, rhs, opts)
	end
end

function CreateNoremap(type, opts)
	return function(lhs, rhs, bufnr)
        bufnr = bufnr or 0
		vim.api.nvim_buf_set_keymap(bufnr, type, lhs, rhs, opts)
	end
end

NnoremapGlobal = CreateNoremapGlobal("n", { noremap = true })
NnoremapGlobal("<leader>nc", "<cmd>:lua require(\"tree-navigation.telescope\").navigate_to(require(\"tree-navigation\").get_class_nodes())<CR>");

Nnoremap = CreateNoremap("n", { noremap = true })
Inoremap = CreateNoremap("i", { noremap = true })

require('project_nvim').setup {
    -- your configuration comes here
    -- or leave it empty to use the default settings
    -- refer to the configuration section below
    -- all the patterns used to detect root dir, when **"pattern"** is in

    -- detection_methods
    patterns = { '.git',  'makefile', 'package.json', 'vendor' },

}

require('telescope').setup {
    extensions = {
        fzf = {
            fuzzy = true,                    -- false will only do exact matching
            override_generic_sorter = false, -- override the generic sorter
            override_file_sorter = true,     -- override the file sorter
            case_mode = 'smart_case',        -- or "ignore_case" or "respect_case"
                                         -- the default case_mode is "smart_case"
        }
    },
    defaults = { file_ignore_patterns = { "node_modules" }}
}

require('telescope').load_extension('fzf')
require('telescope').load_extension('projects')
require('telescope').load_extension('harpoon')
EOF

lua << EOF
-- LSP Config
-- Mappings.
-- See `:help vim.diagnostic.*` for documentation on any of the below functions
local opts = { noremap=true, silent=true }

local source_mapping = {
	buffer = '[Buffer]',
	nvim_lsp = '[LSP]',
	nvim_lua = '[Lua]',
	cmp_tabnine = '[TN]',
	path = '[Path]',
}
local lspkind = require("lspkind")

local tabnine = require('cmp_tabnine.config')
tabnine:setup({
	max_lines = 1000;
	max_num_results = 20;
	sort = true;
	run_on_every_keystroke = true;
	snippet_placeholder = '..';
	ignored_file_types = { -- default is not to ignore
		-- uncomment to ignore in lua:
		-- lua = true
	};
	show_prediction_strength = false;
})

local cmp = require'cmp'

cmp.setup({
    snippet = {
        -- REQUIRED - you must specify a snippet engine
        expand = function(args)
            vim.fn['vsnip#anonymous'](args.body) -- For `vsnip` users.
                -- require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
                -- require('snippy').expand_snippet(args.body) -- For `snippy` users.
                -- vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
        end,
    },

    window = {
        -- completion = cmp.config.window.bordered(),
        -- documentation = cmp.config.window.bordered(),
    },

    mapping = cmp.mapping.preset.insert({
        ['<C-b>'] = cmp.mapping.scroll_docs(-4),
        ['<C-f>'] = cmp.mapping.scroll_docs(4),
        ['<C-Space>'] = cmp.mapping.complete(),
        ['<C-e>'] = cmp.mapping.abort(),
        ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
    }),

    sources = cmp.config.sources({
        { name = 'cmp_tabnine' },
        { name = 'nvim_lsp' },
        { name = 'vsnip' }, -- For vsnip users.
        -- { name = 'luasnip' }, -- For luasnip users.
        -- { name = 'ultisnips' }, -- For ultisnips users.
        -- { name = 'snippy' }, -- For snippy users.
    }, {
        { name = 'buffer' },
    })
})

local lsp_flags = {
    -- This is the default in Nvim 0.7+
    debounce_text_changes = 150,
}

local function config(_config)
	return vim.tbl_deep_extend('force', {
		capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities()),
		on_attach = function()
			Nnoremap('gd', ':lua vim.lsp.buf.definition()<CR>')
			Nnoremap('K', ':lua vim.lsp.buf.hover()<CR>')
			Nnoremap('<leader>vws', ':lua vim.lsp.buf.workspace_symbol()<CR>')
			Nnoremap('<leader>vd', ':lua vim.diagnostic.open_float()<CR>')
			Nnoremap('[d', ':lua vim.lsp.diagnostic.goto_next()<CR>')
			Nnoremap(']d', ':lua vim.lsp.diagnostic.goto_prev()<CR>')
			Nnoremap('<leader>vca', ':lua vim.lsp.buf.code_action()<CR>')
			Nnoremap('<leader>vrr', ':lua vim.lsp.buf.references()<CR>')
			Nnoremap('<leader>vrn', ':lua vim.lsp.buf.rename()<CR>')
			Inoremap('<C-h>', '<cmd>lua vim.lsp.buf.signature_help()<CR>')
            end,
	}, _config or {})
end

-- https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md
require('lspconfig').solargraph.setup(config())

require('lspconfig').gopls.setup(config({
    cmd = { 'gopls', 'serve' },
    settings = {
        gopls = {
            analyses = {
                unusedparams = true
            },
            staticcheck = true,
        },
    },
}))

require('lspconfig').tsserver.setup(config())

require('lspconfig').sumneko_lua.setup(config({
--	cmd = { sumneko_binary, "-E", sumneko_root_path .. "/main.lua" },
	settings = {
		Lua = {
			runtime = {
				-- Tell the language server which version of Lua you're using (most likely LuaJIT in the case of Neovim)
				version = 'LuaJIT',
				-- Setup your lua path
				path = vim.split(package.path, ';'),
			},
			diagnostics = {
				-- Get the language server to recognize the `vim` global
				globals = { 'vim' },
			},
			workspace = {
				-- Make the server aware of Neovim runtime files
				library = {
					[vim.fn.expand('$VIMRUNTIME/lua')] = true,
					[vim.fn.expand('$VIMRUNTIME/lua/vim/lsp')] = true,
				},
			},
		},
	},
}))

require('lspconfig').rust_analyzer.setup(config({
    cmd = { "rustup", "run", "nightly", "rust-analyzer" },
}))

require('lspconfig').cssls.setup(config())
EOF

" TreeSitter config
lua << EOF
require('nvim-treesitter.configs').setup {
    ensure_installed = { 'ruby', 'javascript', 'go', 'lua', 'yaml', 'json', 'http' },
    sync_install = false,
    highlight = {
      enable = true,
    },
}
EOF

" REST Client
lua << EOF
require('rest-nvim').setup {
    -- Open request results in a horizontal split
    result_split_horizontal = false,
    -- Keep the http file buffer above|left when split horizontal|vertical
    result_split_in_place = false,
    -- Skip SSL verification, useful for unknown certificates
    skip_ssl_verification = false,
    -- Highlight request on run
    highlight = {
        enabled = true,
        timeout = 150,
    },
    result = {
        -- toggle showing URL, HTTP info, headers at top the of result window
        show_url = true,
        show_http_info = true,
        show_headers = true,
    },
    -- Jump to request line on run
    jump_to_request = false,
    env_file = '.env',
    custom_dynamic_variables = {},
    yank_dry_run = true,
}
EOF

